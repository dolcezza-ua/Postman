{
	"info": {
		"_postman_id": "27028526-7926-47df-a88e-75cd72ab8e3a",
		"name": "Project_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23594075"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": [
				{
					"name": "Mock /first",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5007/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"first"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "41"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "Date",
							"value": "Sun, 17 Dec 2023 20:59:05 GMT"
						}
					],
					"cookie": [],
					"body": "This is the first responce from server!ss"
				}
			]
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"//or  let jsonData = JSON.parse(responseBody);\r",
							"     let jsonData = pm.response.json();                   \r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name Jasmine\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Jasmine\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age 25\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary 2500\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(2500);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"// console.log(req);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"// console.log(req_name);\r",
							"pm.test(\"Name request\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"// console.log(req_age);\r",
							"pm.test(\"Age request\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req.salary;\r",
							"// console.log(req_salary);\r",
							"pm.test(\"Salary request\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							" console.log(jsonData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"//let req_salary = +req.salary;\r",
							"pm.test(\"u_salary_1_5_year request\", function () {\r",
							"//  var jsonData = pm.response.json();\r",
							"console.log(jsonData.family.u_salary_1_5_year);\r",
							"//console.log(req_salary*4);\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Jasmine",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2500",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Jasmin",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						}
					]
				}
			},
			"response": [
				{
					"name": "Mock /user_info_3",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "25",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "2500",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Jasmine",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "age",
									"value": "25",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "2500",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Jasmin",
									"disabled": true
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 17 Dec 2023 20:59:39 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "293"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=1d532354990994c3"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=6c4c2449ef10b4b4"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1702846839"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "ETag",
							"value": "W/\"125-+6lfSo1xqkOAsSxRJ9vaTn1GkFk\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"body": "{\n    \"age\": \"30\",\n    \"family\": {\n        \"children\": [\n            [\n                \"Alex\",\n                24\n            ],\n            [\n                \"Kate\",\n                12\n            ]\n        ],\n        \"u_salary_1_5_year\": 4000\n    },\n    \"name\": \"Tanya\",\n    \"salary\": 1000\n}"
				}
			]
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"//or  let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"//console.log(req.name);\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name;\r",
							"//console.log(req_name)\r",
							"//console.log(jsonData.name)\r",
							"pm.test(\"Name request\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age;\r",
							"//console.log(req_age)\r",
							"//console.log(jsonData.age)\r",
							"pm.test(\"Age request\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary;\r",
							"//console.log(+req_salary)\r",
							"//console.log(jsonData.salary)\r",
							"pm.test(\"Salary request\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name equal Luky\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Age equal 4\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Ann&age=30&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ann"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": [
				{
					"name": "Mock /object_info_3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5007/object_info_3?name=Ann&age=30&salary=3000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Ann"
								},
								{
									"key": "age",
									"value": "30"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "377"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "Date",
							"value": "Sun, 17 Dec 2023 21:00:32 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"age\": \"30\",\n    \"family\": {\n        \"children\": [\n            [\n                \"Alex\",\n                24\n            ],\n            [\n                \"Kate\",\n                12\n            ]\n        ],\n        \"pets\": {\n            \"cat\": {\n                \"age\": 3,\n                \"name\": \"Sunny\"\n            },\n            \"dog\": {\n                \"age\": 4,\n                \"name\": \"Luky\"\n            }\n        },\n        \"u_salary_1_5_year\": 12000\n    },\n    \"name\": \"Ann\",\n    \"salary\": 3000\n}"
				}
			]
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" //or let jsonData = pm.response.json();\r",
							"   let jsonData = JSON.parse(responseBody);\r",
							"//console.log(\"jsonData \", jsonData)\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"pm.test(\"Name request\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"//console.log(req.name)\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"pm.test(\"Age request\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"//console.log(req.age)\r",
							"    pm.expect(jsonData.age).to.eql(+req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response_salary[0]= Request_salary\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary1 = +jsonData.salary[1]\r",
							"pm.test(\"Response_salary[1]= Request_salary * 2\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_salary1).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let resp_salary2 = +jsonData.salary[2]\r",
							"pm.test(\"Response_salary[2]= Request_salary * 3\", function () {\r",
							"//    var jsonData = pm.response.json();\r",
							"    pm.expect(resp_salary2).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"//var jsonData = pm.response.json();\r",
							"var name = jsonData.name\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"//var jsonData = pm.response.json();\r",
							"var age = jsonData.age\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"//var jsonData = pm.response.json();\r",
							"var salary = req.salary\r",
							"pm.environment.set(\"salary\", salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let sal = jsonData.salary\r",
							"for ( let i=0; i<sal.length; i+=1) {\r",
							"        console.log(i+`) `+ sal[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Kate&age=50&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "50"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": [
				{
					"name": "Mock /object_info_4",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_4?name=Kate&age=50&salary=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Kate"
								},
								{
									"key": "age",
									"value": "50"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 17 Dec 2023 21:00:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "108"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=24aec6c454e67a34"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=607d99891aa1de4a"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1702846915"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "ETag",
							"value": "W/\"6c-pkX9YB6HYY6KjtLIjXzV3N5PfN0\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"body": "{\n    \"age\": 20,\n    \"name\": \"Jasmin\",\n    \"salary\": [\n        4000,\n        \"8000\",\n        \"12000\"\n    ]\n}"
				}
			]
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"// 6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 1. Вставить параметр salary ИЗ окружения в request\r",
							"var salary = req.salary;\r",
							"pm.environment.set(\"salary\", salary);\r",
							"\r",
							"// 2. Вставить параметр age ИЗ окружения в age\r",
							"var age = req.age;\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"// 3. Вставить параметр name ИЗ окружения в name\r",
							"var name = req.name;\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have start_qa_salary\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp).haveOwnProperty(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have qa_salary_after_6_months\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have qa_salary_after_12_months\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have qa_salary_after_1.5_year\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have qa_salary_after_3.5_yearsr\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have person\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp).haveOwnProperty(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary equal salary_request\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months equal salary*2\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months equal salary*2.7\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year equal salary*3.3\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp[`qa_salary_after_1.5_year`]).to.eql(+salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years equal salary*3.8\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp[`qa_salary_after_3.5_years`]).to.eql(+salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name[1] equal salary_request\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age equal age_request\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years equal salary*4.2_request\", function () {\r",
							"//    var resp = pm.response.json();\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let per = resp.person;\r",
							"for (let i in per) {\r",
							"    console.log(i+\" : \" + per[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": [
				{
					"name": "Mock /user_info_2",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 17 Dec 2023 21:01:24 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "360"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=910b1638ff8ce1f8"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=4179c64a06b8973a"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1702846915"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "ETag",
							"value": "W/\"168-HPanVq3NBdxF11m7jcjDzPfUKGo\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						}
					],
					"cookie": [],
					"body": "{\n    \"person\": {\n        \"u_age\": 22,\n        \"u_name\": [\n            \"Tina\",\n            1500,\n            22\n        ],\n        \"u_salary_5_years\": 6300\n    },\n    \"qa_salary_after_1.5_year\": 4950,\n    \"qa_salary_after_12_months\": 4050.0000000000005,\n    \"qa_salary_after_3.5_years\": 5700,\n    \"qa_salary_after_6_months\": 3000,\n    \"start_qa_salary\": 1500\n}"
				}
			]
		}
	]
}